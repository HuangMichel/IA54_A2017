package fr.utbm.ia54.TP2.hollonresearch

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions
import java.io.File
import io.sarl.core.InnerContextAccess
import io.sarl.core.Destroy
import io.sarl.util.Scopes
import io.sarl.core.Behaviors

event Stop

event FoundFile{
	var File : File
}

event SearchRequest{
	var xtensionFile : String
	var pathFile : File
	new (f:File, x: String){
		pathFile = f
		xtensionFile = x
	}
}

agent SearchManager{
	uses Logging, Lifecycle, Schedules, DefaultContextInteractions
	var xten : String
	var pfile : String
	
	on Initialize{
		loggingName = "SearchManager"
		info("Initialize SearchManager")
		
		/*On test si les arguments mis sur SARL environnement n'est pas vide si vide
		 * on met les parametres par default sinon
		 * on prend les parametres du SARL environnement 
		 */
		if (occurrence.parameters.isEmpty()) {
			info("Empty parameters in SARL environment, we will use default parameters")
			xten = ".md"
			pfile = "C:\\Users\\Michel\\Desktop\\IA54_A2017"
			info("extension file " + xten)
			info("path " + pfile)
		}else{
			info("Find parameters in SARL environment")
			xten = occurrence.parameters.get(0) as String
			pfile = occurrence.parameters.get(1) as String
			info("extension file " + xten)
			info("path " + pfile)
		}
		
		/*on test si il y a bien 2 agents dans le defaultSpace sinon on spawn l'agent manquant */
		if (defaultSpace.participants.size() == 1) {
			spawn(SearchAgent)
		}
		
		val task = task("WAITING_SEARCHAGENT")
		task.every(1000)[
			/*on test si on est bien 2
			 * si oui on envoie un SearchRequest avec l'extension du fichier et le path
			 * sinon on attend qu'on trouve l'agent manquant
			 */
			if(defaultSpace.participants.size()>1){
				info("Found SearchAgent")
				emit(new SearchRequest(new File(pfile), xten))
					/*on test si tout les agents du SearchAgent sont mort puis auto-succide
					 * sinon on attend
					 */
				every(5000)[if(getDefaultContext().defaultSpace.participants.size()==1){
					info("I'm alone, killMySelf")
					killMe
				}else{
					info("Still searching file endwiths " + xten)
				}]
				task.cancel
			}else{
				info("Waiting SearchAgent")
			}
		]
	}
	
	on FoundFile{
		info("Found File " + occurrence.File + " by receiver " + ID + ", source : " + occurrence.source.UUID)
	}
	
	on Destroy{
		info("SearchManager go to die")
	}
	
}

agent SearchAgent {
	uses Logging, Lifecycle, DefaultContextInteractions, InnerContextAccess, Behaviors

	on Initialize {
		loggingName = "SearchAgent "
		info("Initialize SearchAgent")
		/*On test si le nombre Agents est bien 2 au dÃ©but sinon on spawn l'agent manquant */
		if (defaultSpace.participants.size() == 1) {
			spawn(SearchManager)
		}
		var File = occurrence.parameters.get(0) as File
		var tension = occurrence.parameters.get(1) as String
		wake(new SearchRequest(File, tension))
		
	}
	
	on SearchRequest{
		loggingName = "Child"
		var File = occurrence.pathFile
		var tension = occurrence.xtensionFile
		info("Launched search request in " + File)
		
		var dir = File;
		
		/*on test sur le path du fichier existe*/
		if (dir.exists) {
			/*on parcourt le dossier */
			for (f : dir.listFiles()) {
				var fileName = f.getName
				/*on test si c'est un fichier ou un dossier
				 * si c'est un dossier on test si le dossier commence par un . ou .. alors c'est un dossier cacher
				 * si c'est un dossier mais il ne commence pas par un . ou .. alors on spawn
				 */
				if (!((fileName.startsWith(".")) || (fileName.startsWith(".."))) && f.isDirectory()) {
					info(fileName + " is a directory")
					SearchAgent.spawnInContext(innerContext, f)
					/*var ^event = new SearchRequest => [
						xtensionFile = tension;
						pathFile = f
					]
					emit(^event, Scopes.addresses(innerContext.defaultSpace.getAddress(targetID)))*/
				} else if ((fileName.startsWith(".")) || (fileName.startsWith(".."))) {
					info( fileName  + " is hidden directory startswith . or ..")
					}
					else{
					info(fileName + " is a file")
					if(fileName.endsWith(tension)){
						emit(new FoundFile => [File = f], 
							Scopes.addresses(occurrence.source)
						)
						info(fileName + " endswith " + tension)
					}else{
						info(fileName + " is not that file endswith " + tension)
					}
					
				}
			}
			
			every(500)[if(innerContext.defaultSpace.participants.size()==1){
				info("Kill the child")
				wake(new Stop)
			}]
			
		}else{
			throw new IllegalArgumentException("Le chemin n'existe pas")
		}
	}
	
	on Stop{
		info("Stop the receiver " + ID + ", source :" + occurrence.source.UUID)
		killMe
	}
	
	on Destroy{
		info("Child go to die");
	}
}

agent BootAgent {
	uses Logging, Lifecycle
	
	on Initialize {
		loggingName = "Boot"
		info("Spawn SearchAgent and SearchManager")
		spawn(SearchManager)
		spawn(SearchAgent)
		killMe
	}
	
	on Destroy{
		info("BootAgent go to die")
	}
}